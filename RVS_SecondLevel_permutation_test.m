% =========================================================================
% permutation test for RVS_EEG
% =========================================================================
restoredefaultpath
addpath('toolboxes\spm12')
addpath('toolboxes\fieldtrip')
ft_defaults
%% parameter settings

close all; clear all; clc

proj_dir    = 'D:\RVS_EEG';
model_ID    = 'rehearsal\induced';
subj_ID     = {'01', '02', '03', '04', '09', '10', '11', '12', '13', '14', ...
               '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', ...
               '25', '26', '27', '28'};
N           = length(subj_ID);
           
img_name    = 'con_0002.nii';      % contrast image name SPM12 .nii SPM8 .img
                                   % con_0001 -> parametric effect
                                   % con_0002 -> positive [0.25 0.25 0.25
                                   % 0.25]

results_dir =  fullfile (proj_dir, 'SecondLevel_Permutation', model_ID);
if exist(results_dir, 'dir') ~= 7
    mkdir(results_dir)
end

CDT                        = 0.005;   % alpha-level that is used to define a cluster
min_neighbours             = 1;      % minimal amount of neighbouring channels that have to share an effect to consider 
                                     % the effect as a spatially coherent cluster
permutation_threshold      = 0.05;   % probability of random occurence of clusters in permutation sample 
                                     % that exhibit a larger effect than the observed data
num_permutation            = 1000;    % number of random samples that should be generated by shuffling the data labels

%%
% set default eeg locations .. just to be on the save side
ref_file = spm_select('FPList', fullfile(proj_dir, 'sj_01', model_ID), '^mrtf_Induced.*\.dat');
D = spm_eeg_load(ref_file);

S = [];
S.D = D;
S.task = 'defaulteegsens';
S.save = 0;
D = spm_eeg_prep(S);
dat = D.fttimelock();      % transform SPM data set into fieldtrip data set
dat.dimord='chan_freq_time';


%cfg.channel='EEG';
% dat=ft_selectdata(cfg,dat);
% dat.powspctrm = zeros(N, length(dat.label), actimg.dim(1), actimg.dim(2));
% dat.dimord='rpt_chan_freq_time';
%% Load and convert each subject's con_images
for sj=1:length(subj_ID) disp(['======== subject ' num2str(sj) ' =========='])
    
    sj_dir = fullfile(proj_dir, ['sj_' subj_ID{sj}], model_ID, 'stats');
    conimg = spm_select('FPList', sj_dir, img_name);
    
    % convert con image format from freq x samples x channels to channels x freq x samples 
    actimg = ft_read_mri(conimg, 'dataformat', 'nifti_spm'); % SPM 12
    dat.powspctrm(sj,:,:,:)=permute(actimg.anatomy, [3 1 2]);
end

% create data set of same size as observed data with only zeros (null-hypothesis)
zero_dat = dat;
zero_dat.powspctrm = zeros(size(dat.powspctrm));

%% set configuration for permutation test
% cp_chans={'FC3', 'FC1', 'C1', 'C3', 'CP3', 'CP1', 'CPz', 'FC4', 'FC2', 'FCz', 'Cz', 'C2', 'C4', 'CP4', 'CP2'};
% front_chans={'Fp1', 'AF7', 'AF3', 'F1', 'F3', 'F5', 'F7', 'FT7', 'FC5', 'FC3', 'FC1', 'Fpz', 'Fp2', 'AF8', 'AF4', 'AFz', 'Fz', 'F2', 'F4', 'F6', 'F8', 'FT8', 'FC6', 'FC4', 'FC2', 'FCz'};
% right_front_chans={'Fp2', 'AF8', 'AF4', 'F2', 'F4', 'F6', 'F8'};
% right_front_ext={'Fpz', 'Fp2', 'AF8', 'AF4', 'AFz', 'Fz', 'F2', 'F4', 'F6', 'F8'};
% centro_front_chans={'Fp1', 'AF7', 'AF3', 'F1', 'F3', 'F5', 'F7', 'FT7', 'FC5', 'FC3', 'FC1', 'C1', 'C3', 'C5', 'T7', 'TP7', 'CP5', 'CP3', 'CP1', 'CPz', 'Fpz', 'Fp2', 'AF8', 'AF4', 'AFz', 'Fz', 'F2', 'F4', 'F6', 'F8', 'FT8', 'FC6', 'FC4', 'FC2', 'FCz', 'Cz', 'C2', 'C4', 'C6', 'T8', 'TP8', 'CP6', 'CP4', 'CP2'};

cfg=[];
cfg.method='template';
cfg.template='D:\MATLAB\toolboxes\fieldtrip\template\neighbours\biosemi64_neighb.mat';
cfg.layout='biosemi64.lay';
cfg.feedback='no';
neighbours=ft_prepare_neighbours(cfg, dat);

cfg = [];
cfg.neighbours       = neighbours;
cfg.channel          = 'all';
cfg.latency          = 'all';
cfg.frequency        = 'all' ;
cfg.method           = 'montecarlo';

% config for cfg.method - cluster-defining statisitics
cfg.statistic        = 'ft_statfun_depsamplesT';
cfg.correctm         = 'cluster';
cfg.clusteralpha     = CDT;        
cfg.clusterstatistic = 'maxsum'; %'maxsum', 'maxsize', 'wcm' (default = 'maxsum')
cfg.minnbchan        = min_neighbours;

% config for statistics of permutation test
cfg.computecritval   = 'no';
cfg.tail             = 0; 
cfg.clustertail      = 0;
cfg.alpha            = permutation_threshold;   % FWE correction threshold 
cfg.numrandomization = num_permutation;
% cfg.correcttail      = 'prob'; % correct for the fact that only a one-tailed test is implemented by the permutation test

% create the right design: here, a comparison vs. a zero-data set (i.e. paired t-test with a null-condition)
design = zeros(2,2*N);
for i = 1:N
  design(1,i) = i;
end
for i = 1:N
  design(1,N+i) = i;
end
design(2,1:N)        = 1;
design(2,N+1:2*N)    = 2;

cfg.design   = design;
cfg.uvar     = 1;                  % row number of design that contains the labels of the UOs (subjects or trials)
cfg.ivar     = 2;                  % row number of the design that contains the labels of the conditions that must be 
                                   % compared. The labels are the numbers 1 and 2.
stat = ft_freqstatistics(cfg, dat, zero_dat);
randnum=randi(1000);
save([results_dir '_positive' num2str(randnum)],'stat','cfg');
%%
% plot_permutation_clusters(stat,2)
%%
try
    % get significant clusters for CONTENT encoding
    pos_cluster_pvals = [stat.posclusters(:).prob];
    pos_signif_clust = find(pos_cluster_pvals < stat.cfg.alpha);
    % make a boolean matrix of which (channel,time)-pairs are part of a significant cluster
    pos_content = ismember(stat.posclusterslabelmat, pos_signif_clust);
catch
    disp('no positive cluster')
    pos_content = zeros(size(stat.stat));
end

try
    % and now for the negative clusters...
    neg_cluster_pvals = [stat.negclusters(:).prob];
    neg_signif_clust = find(neg_cluster_pvals < stat.cfg.alpha);
    neg_content = ismember(stat.negclusterslabelmat, neg_signif_clust);
catch
    disp('no negative cluster')
    neg_content = zeros(size(stat.stat));
end





%%
cfg=[];
cfg.parameter='stat';
cfg.layout='biosemi64.lay';
cfg.colormap=jet;
cfg.zlim=[-5 5];
cfg.alpha= 0.01;
cfg.colorbar='yes';
cfg.hotkeys = 'yes'  
cfg.xlim=[-0.25 1];
cfg.marker = 'off';
% cfg.highlight = 'on';
% cfg.highlightmarkersize = 10;
% cfg.highlightsymbol = '.'
ft_multiplotTFR(cfg,stat)
%ft_clusterplot(cfg, stat);
xlabel('time (s)')
ylabel('frequency (Hz)')